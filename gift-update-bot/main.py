import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "#"  # –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
STAR_GIFTS_FILE = "../venv/star_gifts.json"
TARGET_CHANNEL = "#" #–ö–∞–Ω–∞–ª —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±–µ—Ä–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TON –≤ –∑–≤–µ–∑–¥—ã
STARS_PER_TON = 48.72  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∑–∞ 1 TON

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
SUBSCRIBERS_FILE = "subscribers.json"
try:
    with open(SUBSCRIBERS_FILE, "r") as f:
        subscribers = json.load(f)
except FileNotFoundError:
    subscribers = {}

bot = telebot.TeleBot(BOT_TOKEN)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
def save_subscribers():
    with open(SUBSCRIBERS_FILE, "w") as f:
        json.dump(subscribers, f)

def load_gifts():
    try:
        with open(STAR_GIFTS_FILE, "r", encoding="utf-8") as file:
            return json.load(file)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ù–û–í–´–ï –¥–∞–Ω–Ω—ã–µ
    except (FileNotFoundError, json.JSONDecodeError):
        return []

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start(message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(KeyboardButton("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∏"))
    keyboard.row(KeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è"))
    keyboard.row(KeyboardButton("üìê TON –≤ –∑–≤–µ–∑–¥—ã"), KeyboardButton("‚≠êÔ∏è –ó–≤–µ–∑–¥—ã –≤ TON"))

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö NFT –ø–æ–¥–∞—Ä–∫–∞—Ö.\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                     reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text in ["üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∏", "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
                                                           "üìê TON –≤ –∑–≤–µ–∑–¥—ã", "‚≠êÔ∏è –ó–≤–µ–∑–¥—ã –≤ TON"])
def handle_buttons(message):
    user_id = str(message.from_user.id)

    if message.text == "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∏":
        from datetime import datetime
        gifts = load_gifts()
        total_gifts = len(gifts)
        today = datetime.now().strftime('%Y-%m-%d')
        bot.send_message(
            message.chat.id,
            f"–í—Å–µ–≥–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ {today}: {total_gifts}üéÅ"
        )

    elif message.text == "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è":
        if subscribers.get(user_id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            bot.send_message(message.chat.id, "üí°–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
        else:
            subscribers[user_id] = True
            save_subscribers()
            bot.send_message(message.chat.id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")

    elif message.text == "üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è":
        if subscribers.pop(user_id, None):  # –ï—Å–ª–∏ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω, —É–¥–∞–ª—è–µ–º
            save_subscribers()
            bot.send_message(message.chat.id, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

    elif message.text == "üìê TON –≤ –∑–≤–µ–∑–¥—ã":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
        bot.register_next_step_handler(message, ton_conversion_handler)  # –ñ–¥—ë–º –≤–≤–æ–¥

    elif message.text == "‚≠êÔ∏è –ó–≤–µ–∑–¥—ã –≤ TON":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
        bot.register_next_step_handler(message, stars_conversion_handler)  # –ñ–¥—ë–º –≤–≤–æ–¥


# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TON –≤ –∑–≤–µ–∑–¥—ã
def ton_conversion_handler(message):
    try:
        ton_amount = float(message.text)
        stars_per_ton = ton_amount * STARS_PER_TON
        bot.send_message(message.chat.id, f"üíé {ton_amount} TON ‚âà {stars_per_ton:.2f} ‚≠ê")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–≤–µ–∑–¥ –≤ TON
def stars_conversion_handler(message):
    try:
        stars_amount = float(message.text)
        ton_amount = stars_amount / STARS_PER_TON
        bot.send_message(message.chat.id, f"‚≠ê {stars_amount} ‚âà {ton_amount:.4f} TON üíé")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ
@bot.channel_post_handler(func=lambda message: True)
def monitor_channel(message):
    if "new limited gift" in message.text.lower():
        for user_id in subscribers.keys():
            try:
                bot.send_message(int(user_id), f"üöÄ –ù–æ–≤—ã–µ NFT –ø–æ–¥–∞—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã!\n{message.text}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")


print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
bot.polling(none_stop=True)